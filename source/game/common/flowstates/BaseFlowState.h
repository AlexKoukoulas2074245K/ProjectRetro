//
//  BaseFlowState.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 25/06/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef BaseFlowState_h
#define BaseFlowState_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "../utils/Logging.h"

#include <memory>
#include <typeinfo>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

namespace ecs
{
    class World;
}


////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class BaseFlowState
{
    friend class FlowStateManager;

public:
    BaseFlowState(ecs::World& world)
        : mWorld(world)        
        , mNextFlowState(nullptr)
        , mSfxPlaying(false)
    {

    }

    virtual ~BaseFlowState() = default;
    
    virtual void VUpdate(const float dt) = 0;    

protected:
    template<class FlowStateType>
    void CompleteAndTransitionTo()
    {
        static_assert(std::is_base_of<BaseFlowState, FlowStateType>::value,
            "Tried to transition to a non BaseFlowState subclass");
        
#ifndef NDEBUG
        Log(LogType::INFO, "Transitioned to state: %s", typeid(FlowStateType).name());
#endif
        
        mNextFlowState = std::make_unique<FlowStateType>(mWorld);
    }

    bool WasSfxPlayingOnPreviousUpdate() const
    {
        return mSfxPlaying;
    }

    ecs::World& mWorld;    

private:
    std::unique_ptr<BaseFlowState> mNextFlowState;
    bool mSfxPlaying;
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* BaseFlowState_h */
