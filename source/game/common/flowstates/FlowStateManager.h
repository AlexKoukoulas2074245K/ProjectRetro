//
//  FlowStateManager.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 04/07/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef FlowStateManager_h
#define FlowStateManager_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "BaseFlowState.h"

#include <memory>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class FlowStateManager final
{
public:
    FlowStateManager();
    FlowStateManager(std::unique_ptr<BaseFlowState> initialFlowState);
    ~FlowStateManager() = default;

    bool HasActiveFlowState() const;
    void SetActiveFlowState(std::unique_ptr<BaseFlowState> flowState);

    void Update(const float dt);

private:
    std::unique_ptr<BaseFlowState> mActiveFlowState = nullptr;
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* FlowStateManager_h */
