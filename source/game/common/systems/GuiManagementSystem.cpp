//
//  GuiManagementSystem.cpp
//  ProjectRetro
//
//  Created by Alex Koukoulas on 07/05/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "GuiManagementSystem.h"
#include "../GameConstants.h"
#include "../components/GuiStateSingletonComponent.h"
#include "../components/TextboxComponent.h"
#include "../../input/components/InputStateSingletonComponent.h"
#include "../../rendering/components/WindowSingletonComponent.h"
#include "../../resources/ResourceLoadingService.h"

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

float GuiManagementSystem::GUI_TILE_DEFAULT_SIZE = 0.11f;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

GuiManagementSystem::GuiManagementSystem(ecs::World& world)
    : BaseSystem(world)
{
    CalculateAndSetComponentUsageMask<TextboxComponent>();
    InitializeGuiState();
}

void GuiManagementSystem::VUpdateAssociatedComponents(const float) const
{
    auto& inputStateComponent  = mWorld.GetSingletonComponent<InputStateSingletonComponent>();
    const auto& activeEntities = mWorld.GetActiveEntities();
    for (const auto& entityId: activeEntities)
    {
        if (ShouldProcessEntity(entityId))
        {
            inputStateComponent.mHasBeenConsumed = true;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

void GuiManagementSystem::InitializeGuiState() const
{
    ResourceLoadingService::GetInstance().LoadResource(ResourceLoadingService::RES_ATLASES_ROOT + "gui.png");

    auto windowSingletonComponent = mWorld.GetSingletonComponent<WindowSingletonComponent>();

    auto guiStateSingletonComponent                  = std::make_unique<GuiStateSingletonComponent>();
    guiStateSingletonComponent->mGlobalGuiTileWidth  = (GUI_TILE_DEFAULT_SIZE/GAME_TILE_SIZE)/windowSingletonComponent.mAspectRatio;
    guiStateSingletonComponent->mGlobalGuiTileHeight = GUI_TILE_DEFAULT_SIZE/GAME_TILE_SIZE;

    mWorld.SetSingletonComponent<GuiStateSingletonComponent>(std::move(guiStateSingletonComponent));
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
