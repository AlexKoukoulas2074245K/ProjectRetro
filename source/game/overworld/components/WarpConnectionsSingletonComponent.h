//
//  WarpConnectionsSingletonComponent.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 11/04/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef WarpConnectionsSingletonComponent_h
#define WarpConnectionsSingletonComponent_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "../../ECS.h"
#include "../../common/GameConstants.h"
#include "../../common/utils/StringUtils.h"
#include "../../common/utils/TypeTraits.h"

#include <unordered_map>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

struct WarpInfo
{
public:
    WarpInfo()
        : mLevelName()
        , mTileCoords(0, 0)
    {
    }

    WarpInfo(const StringId levelNameId, const TileCoords& tileCoords)
        : mLevelName(levelNameId)
        , mTileCoords(tileCoords)
    {

    }

    StringId mLevelName = StringId();
    TileCoords mTileCoords;
};

inline bool operator == (const WarpInfo& lhs, const WarpInfo& rhs)
{
    return lhs.mLevelName == rhs.mLevelName &&
        lhs.mTileCoords.mCol == rhs.mTileCoords.mCol &&
        lhs.mTileCoords.mRow == rhs.mTileCoords.mRow;
}

struct WarpInfoHasher
{
    std::size_t operator()(const WarpInfo& key) const
    {
        return GetStringHash
        (
            key.mLevelName.GetString() + "," +
            std::to_string(key.mTileCoords.mCol) + "," +
            std::to_string(key.mTileCoords.mRow)
        );
    }
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class WarpConnectionsSingletonComponent final: public ecs::IComponent
{
public:
    bool mHasPendingWarpConnection      = false;
    bool mShouldAutoMoveAfterTransition = false;
    std::unordered_map<WarpInfo, WarpInfo, WarpInfoHasher> mWarpConnections;
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* WarpConnectionsSingletonComponent_h */
