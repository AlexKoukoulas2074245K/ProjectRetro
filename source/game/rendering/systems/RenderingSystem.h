//
//  RenderingSystem.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 28/03/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef RenderingSystem_h
#define RenderingSystem_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "../../common/utils/StringUtils.h"
#include "../../common/utils/MathUtils.h"
#include "../../ECS.h"

#include <set>
#include <string>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class CameraComponent;
class ShaderStoreComponent;
class RenderableComponent;
class WindowComponent;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class RenderingSystem final: public ecs::BaseSystem
{
public:
    RenderingSystem(ecs::World& world);
    
    void VUpdateAssociatedComponents(const float dt) const override;

private:
    void RenderEntityInternal
    (
        const ecs::EntityId entityId,
        const RenderableComponent& entityRenderableComponent,
        const CameraComponent& globalCameraComponent, 
        const ShaderStoreComponent& globalShaderStoreComponent,
        const WindowComponent& globalWindowComponent
    ) const;
    void InitializeRenderingWindowAndContext() const;
    void InitializeCamera() const;
    void CompileAndLoadShaders() const;

    std::set<std::string> GetAndFilterShaderNames() const;

private:
    static const StringId  WORLD_MARIX_UNIFORM_NAME;
    static const StringId  VIEW_MARIX_UNIFORM_NAME;
    static const StringId  PROJECTION_MARIX_UNIFORM_NAME;
    static const glm::vec4 CLEAR_COLOR;

};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* RenderingSystem_h */
