//
//  TextureUtils.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 05/04/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef TextureUtils_h
#define TextureUtils_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <glm/vec2.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

inline std::vector<glm::vec2> CalculateTextureCoordsFromColumnAndRow
(
    const int col,
    const int row,
    const int atlasNumberOfCols,
    const int atlasNumberOfRows,
    const bool horFlipped
)
{
    const auto cols       = static_cast<float>(atlasNumberOfCols);
    const auto rows       = static_cast<float>(atlasNumberOfRows);
    const auto cellWidth  = 1.0f/cols;    
    const auto cellHeight = 1.0f/rows;

    if (horFlipped)
    {
        return
        {
            glm::vec2((col + 1) * cellWidth, 1.0f - row * cellHeight),
            glm::vec2(col * cellWidth,       1.0f - row * cellHeight),
            glm::vec2(col * cellWidth,       1.0f - (row + 1) * cellHeight),
            glm::vec2((col + 1) * cellWidth, 1.0f - (row + 1) * cellHeight)
        };
    }
    else
    {
        return
        {
            glm::vec2(col * cellWidth,       1.0f - row * cellHeight),
            glm::vec2((col + 1) * cellWidth, 1.0f - row * cellHeight),
            glm::vec2((col + 1) * cellWidth, 1.0f - (row + 1) * cellHeight),
            glm::vec2(col * cellWidth,       1.0f - (row + 1) * cellHeight)
        };
    }    
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* TextureUtils_h */
