//
//  ShaderResource.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 29/03/2019.
//


////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef ShaderResource_h
#define ShaderResource_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "IResource.h"
#include "../common/utils/StringUtils.h"

#include <string>
#include <unordered_map>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

using GLuint = unsigned int;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class ShaderResource final: public IResource
{
public:
    ShaderResource() = default;
    ShaderResource
    (
        const std::unordered_map<StringId, GLuint, StringIdHasher> uniformNamesToLocations,
        const GLuint programId
    );
    ShaderResource& operator = (const ShaderResource&);
    ShaderResource(const ShaderResource&);
    
    GLuint GetProgramId() const;
    const std::unordered_map<StringId, GLuint, StringIdHasher>& GetUniformNamesToLocations() const;
    
private:
    void CopyConstruction(const ShaderResource&);
    
private:
    std::unordered_map<StringId, GLuint, StringIdHasher> mShaderUniformNamesToLocations;
    GLuint mProgramId;    
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* ShaderResource_h */
