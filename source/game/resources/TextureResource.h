//
//  TextureResource.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 29/03/2019.
//

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifndef TextureResource_h
#define TextureResource_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "IResource.h"

#include <SDL_stdinc.h>
#include <unordered_set>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

using GLuint = unsigned int;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class TextureResource final: public IResource
{
    friend class TextureLoader;

public:
    ~TextureResource();
    
    GLuint GetGLTextureId() const;
    int GetWidth() const;
    int GetHeight() const;
    bool HasTransparentPixels() const;
    const std::unordered_set<Uint32> GetColorSet() const;

private:
    TextureResource
    (
        const int width, 
        const int height,
        GLuint glTextureId, 
        bool hasTransparentPixels,
        const std::unordered_set<Uint32>& colorSet
    );
    
private:
    const int mWidth;
    const int mHeight;
    const GLuint mGLTextureId;
    const bool mHasTransparentPixels;
    const std::unordered_set<Uint32> mColorset;
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#endif /* TextureResource_h */
