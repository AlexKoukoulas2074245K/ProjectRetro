//
//  StringUtils.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 26/03/2019.
//

#ifndef StringId_h
#define StringId_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "TypeTraits.h"

#include <string> // string

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// Provides a unique identifier for a string, aimed at optimizing string comparisons
class StringId final
{
public:
	StringId(const std::string& str)
		: mString(str)
		, mStringId(GetStringHash(str))
	{
	}

	operator size_t () { return mStringId; }
    bool operator == (const StringId& other) const { return mStringId == other.GetStringId(); }
    
	const std::string& GetString() const { return mString; }
	size_t GetStringId() const { return mStringId; }

private:
	const std::string mString;
	const size_t      mStringId;
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// Custom less operator for StringIds to be used indirectly by stl containers
inline bool operator < (const StringId& lhs, const StringId& rhs)
{
    return lhs.GetStringId() < rhs.GetStringId();
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// Custom StringId hasher to be used in stl containers
struct StringIdHasher
{
    std::size_t operator()(const StringId& key) const
    {
        return key.GetStringId();
    }
};

#endif /* StringId_h */
