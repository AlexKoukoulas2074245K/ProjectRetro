//
//  ECS.h
//  ProjectRetro
//
//  Created by Alex Koukoulas on 26/03/2019.
//

#ifndef ECS_h
#define ECS_h

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <bitset>        // bitset
#include <memory>        // unique_ptr
#include <vector>        // vector
#include <unordered_map> // unordered_map

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// Max component type count allowed
static constexpr int MAX_COMPONENTS = 64;

using ComponentMask = std::bitset<MAX_COMPONENTS>;
using ComponentTypeId = int;
using EntityId = long long;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

struct ComponentTypeIdHasher
{
    std::size_t operator()(const ComponentTypeId& key) const
    {
        return static_cast<std::size_t>(key);
    }
};

struct EntityIdHasher
{
    std::size_t operator()(const EntityId& key) const
    {
        return static_cast<std::size_t>(key);
    }
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class IComponent
{
public:
    virtual ~IComponent() = default;
};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class ISystem
{
    friend class World;

public:
    virtual ~ISystem() = default;
    ISystem(const ISystem&) = delete;
    const ISystem& operator = (const ISystem&) = delete;
    
    virtual void VUpdate(const float dt) = 0;
    
protected:
    ISystem(const ComponentMask& componentUsageMask)
        : mComponentUsageMask(componentUsageMask)
    {}
    
protected:
    const ComponentMask mComponentUsageMask;

};

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class World final
{
public:

    void Update(const float dt)
    {
        for (auto& system : mSystems)
        {
            system->VUpdate(dt);
        }
    }

    void RegisterSystem(std::unique_ptr<ISystem> system)
    {
        mSystems.push_back(std::move(system));
    }

private:
    std::vector<std::unique_ptr<ISystem>> mSystems;
    std::vector<
};

#endif /* ECS_h */
